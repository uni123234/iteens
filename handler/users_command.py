import json,random

from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from googletrans import Translator

from load import dp , bot
from db_learn.db_state import FSMRegister, FSMTranslate, FSMTest
from kb_learns.keyboards import reply_markup
from db_learn.db import DbUsers
from .kb_learns.keyboards import get_random_word


file_path = 'handler/words.json'

with open(file_path, 'r', encoding='utf-8') as file:
    words_data = json.load(file)



@dp.message(Command("start"))
async def start(msg: types.Message, state: FSMContext):
    await msg.answer(f"–ü—Ä–∏–≤—ñ—Ç, {msg.from_user.first_name}. –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–∏–≤—á–∏—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É‚ò∫")
    user = DbUsers()
    if user.check(msg.from_user.id) is None:
        await state.set_state(FSMRegister.first_name)
        await msg.answer("üì•–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—èüì•")
        await msg.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—èüñäÔ∏è")


@dp.message(FSMRegister.first_name)
async def start_name(msg: types.Message, state: FSMContext):
    await state.update_data(first_name=msg.text)
    await state.set_state(FSMRegister.last_name)
    await msg.answer("üì•–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µüì•")


@dp.message(FSMRegister.last_name)
async def start_last_name(msg: types.Message, state: FSMContext):
    # Monkey D. Luffy
    await state.update_data(last_name=msg.text)
    await state.set_state(FSMRegister.lng_lvl)
    await msg.answer("üì•–í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—óüì•")


@dp.message(FSMRegister.lng_lvl)
async def start_lng_lvl(msg: types.Message, state: FSMContext,):
    await state.update_data(lng_lvl=msg.text)
    get_info = await state.get_data()
    ints=DbUsers()

    ints.insert_user(
        username=msg.from_user.username,
        first_name=get_info.get("first_name"),
        last_name=get_info.get("last_name"),
        lng_lvl=get_info.get("lng_lvl"),
        telegram_id=msg.from_user.id, 
        progress=0
    )

    await msg.answer("üìú–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!üìú")
    await state.clear()


@dp.message(Command("test"))
async def tests_eng_lvl(msg: types.Message, state: FSMContext):
    random_word = random.choice(words_data["words"])
    word = random_word["word"]
    translation = random_word["translation"]
    await state.set_state(FSMTest.translation)
    await state.update_data(translation=word)
    await msg.answer("üìú–¢–µ—Å—Ç—É–≤–∞–Ω—è –±—É–¥–µ –≤ –≤–∏–¥—ñ \n–±–æ—Ç –≤–∞–º –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Å–ª–æ–≤–∞ –Ω–∞ —É–∫—Ä\n –∞ –≤–∏ –º–∞—î—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –ê–Ω–≥–ªüìú")
    await msg.answer(translation)
    


@dp.message(FSMTest.translation)
async def transt_random(msg: types.Message, state: FSMContext):
    tests = await state.get_data()
    rty = tests.get('translation')
    if rty == msg.text.lower():
        await msg.answer('—É –≤–∞—Å +1 –±–∞–ª –¥–æ –ø—Ä–æ–≥—Ä–µ—Å—Éüéì –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æüéì')
        db = DbUsers()
        say = db.get_progress(msg.from_user.id)
        suma = int(say[0])+1
        db.update_user(msg.from_user.id, suma)
    else:
        await msg.answer("‚ùå–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ‚ùå")
        await msg.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å {rty} üìö")
        await state.clear()


@dp.message(Command("learn"))
async def learn_words_and_synatx_word(msg: types.Message):
    text="üìö–í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–≤—á–∏—Ç–∏üìö"
    db = DbUsers()
    say = db.get_progress(msg.from_user.id)
    suma = int(say[0])+1
    db.update_user(msg.from_user.id, suma)
    await msg.answer(text, reply_markup=reply_markup)


@dp.message(Command("myprogress"))
async def progress_learn(msg: types.Message):
    db = DbUsers()
    say = db.get_progress(msg.from_user.id)
    await msg.answer(str(say[0]))


@dp.callback_query(F.data=="learn_new_word")
async def randoms_word(call_back: types.CallbackQuery ):
    mat = get_random_word()
    db = DbUsers()
    say = db.get_progress(call_back.from_user.id)
    suma = int(say[0])+1
    db.update_user(call_back.from_user.id, suma)
    await bot.delete_message(call_back.message.chat.id, call_back.message.message_id)
    await call_back.message.answer(mat[0],reply_markup=mat[1])


@dp.message(Command("howdoisay"))
async def translaters(msg: types.Message, state: FSMContext) -> None:
    await state.set_state(FSMTranslate.text)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞–∫—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—éüì≤ ")


@dp.message(FSMTranslate.text)
async def trans(msg: types.Message, state:FSMContext):
    text = msg.text
    translator = Translator(service_urls=['translate.googleapis.com'])
    tr = translator.translate(text, dest='en')
    await msg.answer(tr.text)
    await state.clear()


@dp.message(Command("info"))
async def info_command(msg: types.Message):
    text=""" - –©–æ –º–æ–∂–µ —Ü–µ–π –±–æ—Ç?üåÜ
 - –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—óüåá
 - –î–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—èüéÜ
 - –î–∞–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤ —Ç–∞ –ø—Ä–∞–≤–∏–ªüéá
 - –î–∞–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—èüå†
 - –î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å —ñ–∑ –∫–æ—Ä–∏—Å—Ç—éüõ† """
    await msg.answer(text)

